#!/usr/bin/env python

import os
import urllib
from pathlib import Path

import molparse as mp
from molparse.residue import silence_unknown_res_warning

silence_unknown_res_warning()

import mcol

import mrich as logger

OUTPUT_DIR = "output"
IGNORE_RESIDUES = "ZN EDO MPD DMS PEG ETG PO4"
REMOVE_RESIDUES = ""

RCSB_PDB_DOWNLOAD_URL = "http://files.rcsb.org/download/"
RCSB_MMCIF_DOWNLOAD_URL = "http://files.rcsb.org/download/"
RCSB_MTZ_DOWNLOAD_URL = "http://edmaps.rcsb.org/coefficients/"
RCSB_CIF_DOWNLOAD_URL = "http://files.rcsb.org/ligands/download/"


def read_pdb_codes(file: str) -> list[str]:
    """read PDB codes from a text file

    :param file: path to text file
    :returns: a list of lowercase PDB code strings

    """

    codes = []
    with open(file, "rt") as f:
        for line in f:
            s = line.strip().lower()
            if s:
                codes.append(s)

    if not codes:
        logger.error(f"Could not read any PDB codes from {PDB_CODE_FILE}")

    return codes


def download_pdb(
    code: str,
) -> Path:

    out_file = OUTPUT_DIR / f"{code}_rcsb.pdb"
    if not Path(out_file).exists():
        try:
            urllib.request.urlretrieve(f"{RCSB_PDB_DOWNLOAD_URL}/{code}.pdb", out_file)
        except urllib.error.URLError as e:
            # logger.print(f"[debug]Can't retrieve PDB for {code}. Will use the mmCIF instead")
            return None
    return out_file


def download_mtz(
    code: str,
) -> Path:

    out_file = OUTPUT_DIR / f"{code}.mtz"
    if not Path(out_file).exists():
        try:
            urllib.request.urlretrieve(f"{RCSB_MTZ_DOWNLOAD_URL}/{code}.mtz", out_file)
        except urllib.error.URLError as e:
            logger.warning(f"Can't retrieve MTZ for {code}")
            return None

    return out_file


def download_cif(
    code: str,
) -> Path:

    if isinstance(code, dict):
        # logger.warning(f"Downloading multiple ligand CIFs: {code}. If this is not a combi-soak dataset change -i argument")
        return [download_cif(c) for c in code]

    out_file = OUTPUT_DIR / f"{code}_rcsb.cif"
    if not Path(out_file).exists():
        urllib.request.urlretrieve(f"{RCSB_CIF_DOWNLOAD_URL}/{code}.cif", out_file)
    return out_file


def download_mmcif(
    code: str,
) -> Path:

    out_file = OUTPUT_DIR / f"{code}_rcsb_mmCIF.cif"
    if not Path(out_file).exists():
        urllib.request.urlretrieve(f"{RCSB_MMCIF_DOWNLOAD_URL}/{code}.cif", out_file)
    return out_file


def clean_sys(sys, out_file):
    if REMOVE_RESIDUES:
        sys.remove_residues(names=REMOVE_RESIDUES.split(), verbosity=0)

    lig_code = extract_ligand_code(sys)

    if isinstance(lig_code, list):

        code_map = {}
        for i, code in enumerate(lig_code):
            assert i < 9
            new_code = f"LG{i+1}"
            logger.print("Renaming", code, "-->", new_code)
            sys.rename_residues(code, new_code, verbosity=0)
            code_map[code] = new_code

        lig_code = code_map

    else:
        sys.rename_residues(lig_code, "LIG", verbosity=0)

    # logger.writing(out_file)
    mp.write(out_file, sys, verbosity=0)

    return lig_code, sys


def clean_pdb(
    in_file: Path,
    # remove_heterogens: bool = True,
) -> str:

    out_file = str(in_file).replace("_rcsb.pdb", ".pdb")

    sys = mp.parse(in_file, keep_headers=True, verbosity=0)

    return clean_sys(sys, out_file)


def clean_cif(
    in_file: Path, lig_code: str, pdb_code: str, new_code: str = "LIG"
) -> Path:

    out_file = OUTPUT_DIR / f"{pdb_code}.cif"
    buffer = in_file.read_text()
    buffer = buffer.replace(lig_code, new_code)
    # logger.writing(out_file)
    with open(out_file, "wt") as f:
        f.write(buffer)
    return out_file


def clean_mmcif(in_file: Path):

    out_file = str(in_file).replace("_rcsb_mmCIF.cif", ".pdb")

    sys = mp.parse(in_file, verbosity=0)

    return clean_sys(sys, out_file)


def check_cif(cif_file, sys):

    from rdkit.Chem import AllChem

    try:
        mol_cif = mp.rdkit.mol_from_cif(cif_file)
    except Exception as e:
        logger.error("Could not create rdkit.Chem.Mol from", cif_file)
        return False

    grp_cif = mp.rdkit.mol_to_AtomGroup(mol_cif)

    matching = True

    lig_res = sys.residues["LIG"]

    for res in lig_res:

        mol_pdb = res.rdkit_mol

        if mol_pdb is None:
            raise MolInstantiationError("Could not create PDB ligand")

        if len(grp_cif.atoms) != len(res.atoms):
            matching = False

        if not matching:
            logger.warning(
                cif_file, f"PDB ligand ({res.name} {res.number}) does not match CIF"
            )

            from molparse.rdkit import compare_mols

            diff1, diff2 = compare_mols(
                mol_cif, mol_pdb, names=["CIF", "PDB"], ignore_hydrogen=True
            )

            if diff1:
                logger.print(f"PDB is missing {diff1}, will try to remove")
            if diff2:
                logger.error(cif_file, f"is missing {diff2}, cannot remove")

    if not matching:
        if len(lig_res) > 1:
            logger.warning(cif_file, "CIF modification may fail with multiple residues")

        elif diff1:

            from molparse.io import modifyCIF

            out_file = str(cif_file).replace(".cif", "_mod.cif")
            modifyCIF(cif_file, out_file, remove_atomtypes=list(diff1.keys()))
            logger.writing(out_file)
            logger.warning(out_file, "metadata unmodified")

    return matching


def extract_ligand_code(
    sys: mp.System,
) -> str:

    if sys._header_data:

        hetnam_lines = [s for s in sys._header_data if s.startswith("HETNAM")]

        all_lig_codes = [l[11:].split()[0] for l in hetnam_lines]

    else:

        all_lig_codes = list(set(r.name for r in sys.residues if r.type == "LIG"))

    if IGNORE_RESIDUES:
        ignore = IGNORE_RESIDUES.split()
    else:
        ignore = []

    lig_codes = list(set([c for c in all_lig_codes if c not in ignore]))

    if len(lig_codes) > 1:
        logger.warning(
            f"Multiple candidate ligands: {lig_codes}. If not all of these are correct adjust the --ignore parameter"
        )

        return lig_codes

        # raise ValueError(
        #     f"Multiple candidate ligands: {lig_codes}. Try setting the --ignore parameter"
        # )
    elif not lig_codes:
        logger.error(
            f"No non-ignored candidate ligands: {all_lig_codes}. Try changing the --ignore parameter"
        )
        logger.var("all_lig_codes", all_lig_codes)
        logger.var("ignore", ignore)
        raise ValueError(
            f"No non-ignored candidate ligands: {all_lig_codes}. Try changing the --ignore parameter"
        )

    return lig_codes[0]


def parse_args():

    import argparse

    parser = argparse.ArgumentParser(
        prog="pdb-scrape",
        description="Fetches necessary files from the protein data bank for collation and alignment with xchem-align",
    )

    parser.add_argument(
        "pdb_code_file", help="Text file containing PDB codes on separate lines"
    )
    parser.add_argument(
        "-o", "--output", help=f"output directory/path (defaults to {OUTPUT_DIR})"
    )
    parser.add_argument(
        "-r",
        "--remove",
        help=f"space-delimited list of residue names to remove from PDBs (defaults to '{REMOVE_RESIDUES}')",
    )
    parser.add_argument(
        "-i",
        "--ignore",
        help=f"space-delimited list of residue names to ignore when picking the ligand (defaults to '{IGNORE_RESIDUES}')",
    )
    parser.add_argument("-m", "--mtz", help=f"fetch MTZ files)")
    parser.add_argument(
        "-c", "--clean", action="store_true", help=f"clean up original RCSB files"
    )
    parser.add_argument(
        "-co",
        "--clean-only",
        action="store_true",
        help=f"Do not run scraper but only clean up original RCSB files",
    )

    return parser.parse_args()


class MolInstantiationError(Exception): ...


def main():

    global OUTPUT_DIR, REMOVE_RESIDUES, IGNORE_RESIDUES

    args = parse_args()

    PDB_CODE_FILE = args.pdb_code_file
    REMOVE_RESIDUES = args.remove or REMOVE_RESIDUES
    IGNORE_RESIDUES = args.ignore or IGNORE_RESIDUES
    OUTPUT_DIR = args.output or OUTPUT_DIR
    OUTPUT_DIR = Path(OUTPUT_DIR)

    logger.var("PDB_CODE_FILE", PDB_CODE_FILE)
    logger.var("OUTPUT_DIR", OUTPUT_DIR)
    logger.var("REMOVE_RESIDUES", REMOVE_RESIDUES)
    logger.var("IGNORE_RESIDUES", IGNORE_RESIDUES)

    if not args.clean_only:

        # read PDB codes
        codes = read_pdb_codes(PDB_CODE_FILE)

        if not codes:
            return

        try:
            OUTPUT_DIR.mkdir(parents=True, exist_ok=False)

        except FileExistsError:
            logger.warning(f"Using existing RCSB downloads in {OUTPUT_DIR}")

    for code in logger.track(codes, total=len(codes), prefix="Scraping"):

        try:
            pdb_file = download_pdb(code)

            if pdb_file is None:
                mmcif_file = download_mmcif(code)
                lig_code, sys = clean_mmcif(mmcif_file)

            else:
                lig_code, sys = clean_pdb(pdb_file)

            if args.mtz:
                mtz_file = download_mtz(code)

            cif_file = download_cif(lig_code)

        except urllib.error.HTTPError as e:
            logger.error(code, e)
            continue
        except ValueError as e:
            logger.error(code, e)
            continue

        if isinstance(cif_file, list):
            combi_soak = True

            files = []
            for file, (lig_code, new_code) in zip(cif_file, lig_code.items()):
                files.append(
                    clean_cif(
                        file,
                        lig_code=lig_code,
                        pdb_code=f"{code}_{new_code}",
                        new_code=new_code,
                    )
                )

            from merge_cif import merge_cifs

            cif_file = merge_cifs(files, OUTPUT_DIR / f"{code}.cif")

            logger.warning(
                "Won't check PDB ligand against CIF because it's not supported for combi-soaks"
            )

        else:
            combi_soak = False
            cif_file = clean_cif(cif_file, lig_code=lig_code, pdb_code=code)

            try:
                matching = check_cif(cif_file, sys)
            except MolInstantiationError as e:
                logger.warning(
                    code,
                    "Could not create ligand from PDB. This may cause problems later on",
                )
                continue

        if combi_soak:
            logger.success(code, "OK")
        elif matching:
            logger.success(code, "OK")
        else:
            logger.error(code, "cif /= pdb")

    if args.clean or args.clean_only:
        with logger.loading("Cleaning up..."):
            for child in OUTPUT_DIR.iterdir():
                if child.is_file():
                    if "_rcsb" in str(child):
                        child.unlink()

    import os

    with logger.loading("Zipping"):
        os.system(
            f"zip -q {OUTPUT_DIR}/{OUTPUT_DIR.name}.zip {OUTPUT_DIR}/????.pdb {OUTPUT_DIR}/????.mtz {OUTPUT_DIR}/????.cif {OUTPUT_DIR}/????_mod.cif"
        )

    logger.success("Done")


if __name__ == "__main__":
    main()
