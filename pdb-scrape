#!/usr/bin/env python

import os
import urllib
from pathlib import Path

import molparse as mp
from molparse.residue import silence_unknown_res_warning
silence_unknown_res_warning()

from tqdm import tqdm

import mcol
from mlog import setup_logger
logger = setup_logger('PdbScraper')

OUTPUT_DIR='output'
IGNORE_RESIDUES = "EDO MPD DMS PEG ETG PO4 SO4 GOL TCE MES EPE TRS CL K MG NA NI CA ZN"
REMOVE_RESIDUES = ""

RCSB_PDB_DOWNLOAD_URL = 'http://files.rcsb.org/download/'
RCSB_MTZ_DOWNLOAD_URL = 'http://edmaps.rcsb.org/coefficients/'
RCSB_CIF_DOWNLOAD_URL = 'http://files.rcsb.org/ligands/download/'

def read_pdb_codes(
    file: str
) -> list[str]:

    """read PDB codes from a text file

    :param file: path to text file
    :returns: a list of lowercase PDB code strings

    """

    codes = []
    with open(file, 'rt') as f:
        for line in f:
            s = line.strip().lower()
            if s:
                codes.append(s)

    if not codes:
        logger.error(f'Could not read any PDB codes from {PDB_CODE_FILE}')

    return codes

def download_pdb(
    code: str, 
) -> Path:

    out_file = OUTPUT_DIR/f'{code}_rcsb.pdb'
    if not Path(out_file).exists():
        urllib.request.urlretrieve(f'{RCSB_PDB_DOWNLOAD_URL}/{code}.pdb', out_file)
    return out_file

def download_mtz(
    code: str, 
) -> Path:

    out_file = OUTPUT_DIR/f'{code}.mtz'
    if not Path(out_file).exists():
        urllib.request.urlretrieve(f'{RCSB_MTZ_DOWNLOAD_URL}/{code}.mtz', out_file)
    return out_file

def download_cif(
    code: str, 
) -> Path:

    out_file = OUTPUT_DIR/f'{code}_rcsb.cif'
    if not Path(out_file).exists():
        urllib.request.urlretrieve(f'{RCSB_CIF_DOWNLOAD_URL}/{code}.cif', out_file)
    return out_file

def clean_pdb(
    in_file: Path, 
    # remove_heterogens: bool = True,
) -> str:

    out_file = str(in_file).replace('_rcsb.pdb', '.pdb')

    sys = mp.parse(in_file, keep_headers=True, verbosity=0)

    if REMOVE_RESIDUES:
        sys.remove_residues(names=REMOVE_RESIDUES.split(), verbosity=0)

    lig_code = extract_ligand_code(sys)

    assert lig_code

    sys.rename_residues(lig_code, 'LIG', verbosity=0)

    # logger.writing(out_file)
    mp.write(out_file, sys, verbosity=0)

    return lig_code, sys

def clean_cif(
    in_file: Path,
    lig_code: str,
    pdb_code: str,
) -> Path:

    out_file = OUTPUT_DIR/f'{pdb_code}.cif'
    buffer = in_file.read_text()
    buffer = buffer.replace(lig_code, 'LIG')
    # logger.writing(out_file)
    with open(out_file,'wt') as f:
        f.write(buffer)
    return out_file

def check_cif(cif_file, sys):

    from rdkit.Chem import AllChem

    mol_cif = mp.rdkit.mol_from_cif(cif_file)

    grp_cif = mp.rdkit.mol_to_AtomGroup(mol_cif)
    
    matching = True

    lig_res = sys.residues['LIG']

    for res in lig_res:
        
        mol_pdb = res.rdkit_mol

        if mol_pdb is None:
            raise ValueError('Could not create PDB ligand')

        if len(grp_cif.atoms) != len(res.atoms):
            matching = False

        # else:
        #     try:
        #         mol_pdb = AllChem.AssignBondOrdersFromTemplate(mol_cif, mol_pdb)
        #     except ValueError:
        #         matching = False

        if not matching:
            tqdm.write(f'{mcol.warning}{mcol.bold}{mcol.inverse} Warning {mcol.uninverse}{mcol.unbold} {mcol.underline}{cif_file}{mcol.ununderline} PDB ligand ({res.name} {res.number}) does not match CIF {mcol.clear}')

            from molparse.rdkit import compare_mols

            diff1, diff2 = compare_mols(mol_cif, mol_pdb, names=['CIF', 'PDB'], ignore_hydrogen=True)

            if diff1:
                tqdm.write(f'PDB is missing {diff1}, will try to remove')
            if diff2:
                tqdm.write(f'{mcol.error}{mcol.bold}{mcol.inverse} ERROR {mcol.uninverse}{mcol.unbold} {mcol.underline}{cif_file}{mcol.ununderline} is missing {diff2}, cannot remove {mcol.clear}')

    if not matching:
        if len(lig_res) > 1:
            tqdm.write(f'{mcol.warning}{mcol.bold}{mcol.inverse} Warning {mcol.uninverse}{mcol.unbold} {mcol.underline}{cif_file}{mcol.ununderline} CIF modification may fail with multiple residues {mcol.clear}')
        
        elif diff1:

            from molparse.io import modifyCIF

            out_file = str(cif_file).replace('.cif', '_mod.cif')
            modifyCIF(cif_file, out_file, remove_atomtypes=list(diff1.keys()))
            tqdm.write(f'{mcol.file}{mcol.bold}{mcol.inverse} DISK {mcol.uninverse}{mcol.unbold} modified cif file: {mcol.underline}{out_file}{mcol.clear}')
            tqdm.write(f'{mcol.warning}{mcol.bold}{mcol.inverse} Warning {mcol.uninverse}{mcol.unbold} {mcol.underline}{out_file}{mcol.ununderline} metadata unmodified {mcol.clear}')

    return matching


def extract_ligand_code(
    sys: mp.System,
) -> str:

    hetnam_lines = [s for s in sys._header_data if s.startswith('HETNAM')]

    lig_codes = [l[11:].split()[0] for l in hetnam_lines]

    if IGNORE_RESIDUES:
        ignore = IGNORE_RESIDUES.split()
    else:
        ignore = []

    lig_codes = list(set([c for c in lig_codes if c not in ignore]))

    if len(lig_codes) != 1:
        logger.error(f'Multiple candidate ligands: {lig_codes}. Try setting the --ignore parameter')
        return None

    return lig_codes[0]

def parse_args():

    import argparse
    parser = argparse.ArgumentParser(prog='pdb-scrape', description='Fetches necessary files from the protein data bank for collation and alignment with xchem-align')

    parser.add_argument("pdb_code_file", help='Text file containing PDB codes on separate lines')
    parser.add_argument("-o", '--output', help=f"output directory/path (defaults to {OUTPUT_DIR})")
    parser.add_argument("-r", '--remove', help=f"space-delimited list of residue names to remove from PDBs (defaults to '{REMOVE_RESIDUES}'')")
    parser.add_argument("-i", '--ignore', help=f"space-delimited list of residue names to ignore when picking the ligand (defaults to '{IGNORE_RESIDUES}'')")
    parser.add_argument("-c", '--clean', action='store_true', help=f"clean up original RCSB files")
    parser.add_argument("-co", '--clean-only', action='store_true', help=f"Do not run scraper but only clean up original RCSB files")

    return parser.parse_args()

def main():

    global OUTPUT_DIR, REMOVE_RESIDUES, IGNORE_RESIDUES

    args = parse_args()

    PDB_CODE_FILE = args.pdb_code_file
    REMOVE_RESIDUES = args.remove or REMOVE_RESIDUES
    IGNORE_RESIDUES = args.ignore or IGNORE_RESIDUES
    OUTPUT_DIR = args.output or OUTPUT_DIR
    OUTPUT_DIR = Path(OUTPUT_DIR)

    logger.var("PDB_CODE_FILE", PDB_CODE_FILE)
    logger.var("OUTPUT_DIR", OUTPUT_DIR)
    logger.var("REMOVE_RESIDUES", REMOVE_RESIDUES)
    logger.var("IGNORE_RESIDUES", IGNORE_RESIDUES)

    if not args.clean_only:

        # read PDB codes
        codes = read_pdb_codes(PDB_CODE_FILE)

        if not codes:
            return
        
        try:
            OUTPUT_DIR.mkdir(parents=True, exist_ok=False)
        
        except FileExistsError:                
            logger.warning(f'Using existing RCSB downloads in {OUTPUT_DIR}')

    with tqdm(total=len(codes), colour='yellow', bar_format=r'{l_bar}{bar}| {n:.0f}/{total_fmt} [{elapsed}<{remaining}, {rate_fmt}{postfix}]') as pbar:

        for code in codes:

            pbar.set_postfix_str(code)
            
            try:
                pdb_file = download_pdb(code)
                pbar.update(0.19999999)

                mtz_file = download_mtz(code)
                pbar.update(0.19999999)
                
                lig_code, sys = clean_pdb(pdb_file)
                pbar.update(0.19999999)
                
                cif_file = download_cif(lig_code)
                pbar.update(0.19999999)


            except urllib.error.HTTPError as e:
                tqdm.write(f'{mcol.error}{mcol.inverse} ERROR {mcol.uninverse} {mcol.underline}{code}{mcol.ununderline} {e} {mcol.clear}')
                continue

            cif_file = clean_cif(cif_file, lig_code=lig_code, pdb_code=code)
            pbar.update(0.19999999)

            try:
                matching = check_cif(cif_file, sys)
            except ValueError as e:
                tqdm.write(f'{mcol.error}{mcol.inverse} ERROR {mcol.uninverse} {code} {e}!{mcol.clear}')
                continue
            
            if matching:
                tqdm.write(f'{mcol.success}{mcol.inverse} SUCCESS {mcol.uninverse} {code} OK!{mcol.clear}')
            else:
                tqdm.write(f'{mcol.error}{mcol.inverse} ERROR {mcol.uninverse} {code} cif /= pdb !{mcol.clear}')
        
        pbar.set_postfix_str('COMPLETE')

    if args.clean or args.clean_only:
        logger.info('Cleaning up...')
        for child in OUTPUT_DIR.iterdir():
            if child.is_file():
                if '_rcsb' in str(child):
                    child.unlink()

    import os
    logger.info('Zipping...')
    os.system(f'zip {OUTPUT_DIR}/{OUTPUT_DIR.name}.zip {OUTPUT_DIR}/????.pdb {OUTPUT_DIR}/????.mtz {OUTPUT_DIR}/????.cif {OUTPUT_DIR}/????_mod.cif')
    logger.success('Done')

if __name__ == '__main__':
    main()
